int factorial[N],modinverse[N];


int power(int a,int m1)
{
    if(m1==0)return 1;
    else if(m1==1)return a;
    else if(m1==2)return (1LL*a*a)%mod;
    else if(m1&1)return (1LL*a*power(power(a,m1/2),2))%mod;
    else return power(power(a,m1/2),2)%mod;
}

void factorialfun()
{
    factorial[0]=1;
     for(int i = 1; i < N; i++)
        factorial[i] = (factorial[i-1]*i)%mod;
}

void modinversefun()
{
    modinverse[N-1] = power(factorial[N-1],mod-2)%mod;
    
    for(int i = N - 2;i>=0;i--)
        modinverse[i] = (modinverse[i+1]*(i+1))%mod;
}

int binomial(int n,int r)
{
    if(r>n)
        return 0;

    int a = factorial[n]*modinverse[n-r];
    if(a>=mod)
        a%=mod;
        
    a*=modinverse[r];
    if(a>=mod)
        a%=mod;
    return a;
}



int32_t main()
{
    factorialfun();
    modinversefun();
    
    int n, r;
    cin >> n >> r;
        
    cout << binomial(n,r) << endl;
    
    
    return 0;
}
