#define LG 30

int n, tim = 0;
int strtim[N], endtim[N], level[N];
int par[LG+5][N];

vector<int>gr[N];


void dfs(int x, int parent, int lvl)
{
    strtim[x] = ++tim;
    level[x] = lvl;
    par[0][x] = parent;
    for(auto it:gr[x])
        if(it!=parent)
            dfs(it, x, lvl+1);

    endtim[x] = tim;
}

void precompute()
{
    for(int j=1;j<LG;j++)
        for(int i=1;i<=n;i++)
            par[j][i] = par[j-1][par[j-1][i]];
}

int kth_ancestor(int u, int k)
{
    for(int j=20;j>=0;j--)
        if(k&(1LL<<j))
            u = par[j][u];

    return u;
}

int LCA(int u, int v)
{
    if(level[u]<level[v])
        swap(u,v);
    int diff=level[u]-level[v];
    for(int i=LG-1;i>=0;i--)
    {
        if((1<<i) & diff)
        {
            u=par[i][u];
        }
    }
    if(u==v)
        return u;
    for(int i=LG-1;i>=0;i--)
    {
        if(par[i][u] && par[i][u]!=par[i][v])
        {
            u=par[i][u];
            v=par[i][v];
        }
    }
    return par[0][u];
}

int dist(int u, int v)
{
    return level[u] + level[v] - 2 * level[LCA(u, v)];
}
